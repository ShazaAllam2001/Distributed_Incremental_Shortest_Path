package RMI;

import Util.RequestsGenerator;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.text.SimpleDateFormat;
import java.util.*;

public class ClientRMI {
    public static final int SLEEP_TIME = 5000;  // sleep for 5 sec
    private final Registry registry;
    private final ServerI stub;
    private Logger logger;
    private Properties props;
    private RequestsGenerator generator;

    public ClientRMI() throws IOException, NotBoundException {
        System.out.println("Initializing client");
        this.registry = LocateRegistry.getRegistry("localhost", 1099);
        this.stub = (ServerI) registry.lookup("server");
        this.props = new Properties();
        props.load(new FileInputStream(ServerI.path + "Configs\\generator.properties"));
        float pWrite = Float.parseFloat(props.getProperty("pWrite"));
        int maxNodeID = Integer.parseInt(props.getProperty("maxNodeID"));
        this.generator = new RequestsGenerator(pWrite, maxNodeID);
        initLogger();
    }

    private void initLogger() {
        System.setProperty("name", "client");
        String dir = "clientLogs";
        System.setProperty("log.directory", dir);
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_hh-mm-ss");
        System.setProperty("current.date.time", dateFormat.format(new Date()));

        File directory = new File(dir);
        if(!directory.exists()){
            directory.mkdir();
        }

        logger = LogManager.getLogger(ClientRMI.class);
        PropertyConfigurator.configure(ServerI.path + "Configs/logs-log4j.properties");
    }

    public void initializeGraph() throws FileNotFoundException, RemoteException, InterruptedException {
        File input = new File(ServerI.path + "\\RMI\\input_graph.txt");
        Scanner scanner = new Scanner(input);
        String line;
        Queue<String> lines = new LinkedList<>();
        while(true) {
            line = scanner.nextLine();
            if(!stub.getInitialized() && line.equals("S")) {
                System.out.print(stub.buildGraph(lines));
                Thread.sleep(SLEEP_TIME);
                stub.setInitialized(true);
                break;
            }
            lines.add(line);
        }
        scanner.close();
    }

    public void runFile() throws FileNotFoundException, RemoteException, InterruptedException {
        File input = new File(ServerI.path + "input.txt");
        Scanner scanner = new Scanner(input);
        run(scanner);
    }

    public void runStdInput() throws RemoteException, InterruptedException {
        Scanner scanner = new Scanner(System.in);
        run(scanner);
    }

    private void run(Scanner scanner) throws RemoteException, InterruptedException {
        String line;
        Queue<String> lines = new LinkedList<>();
        while(true) {
            line = scanner.nextLine();
            if(line.equals("exit")) {
                break;
            }
            if(!stub.getInitialized() && line.equals("S")) {
                System.out.print(stub.buildGraph(lines));
                Thread.sleep(SLEEP_TIME);
                lines = new LinkedList<>();
                stub.setInitialized(true);
            }
            if(stub.getInitialized() && line.equals("F")) {
                logger.info("requests sent: " + lines);
                long startTime = System.currentTimeMillis();
                List<String> results = stub.processBatch(lines);
                long responseTime = System.currentTimeMillis() - startTime;
                for(String result : results) {
                    System.out.println(result);
                }
                logger.info("response: " + results);
                logger.info("response time: " + responseTime + " ms");
                logger.info("number of requests per second: " + (lines.size()/responseTime)); // frequency of requests
                Thread.sleep(SLEEP_TIME);
                lines = new LinkedList<>();
            }
            lines.add(line);
        }
        scanner.close();
    }

    public void runAutoGeneratedBatches(int n) throws RemoteException, InterruptedException {
        for(int i=0; i<n; i++) {
            runAutoGeneratedBatch();
        }
    }

    private void runAutoGeneratedBatch() throws RemoteException, InterruptedException {
        int requestsPerBatch = Integer.parseInt(props.getProperty("requestsPerBatch"));
        Queue<String> lines = generator.getNRequests(requestsPerBatch);
        if(stub.getInitialized()) {
            logger.info("requests sent: " + lines);
            long startTime = System.currentTimeMillis();
            List<String> results = stub.processBatch(lines);
            long responseTime = System.currentTimeMillis() - startTime;
            for(String result : results) {
                System.out.println(result);
            }
            logger.info("response: " + results);
            logger.info("response time: " + responseTime + " ms");
            logger.info("number of requests per second: " + (lines.size()/responseTime)); // frequency of requests
            Thread.sleep(SLEEP_TIME);
        }
    }

}
